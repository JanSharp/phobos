
local profiles = require("phobos_profiles")

local factorio_specific_paths = {
  "control",
}
local standalone_specific_paths = {
  "main",
  "io_util",
  "lib/LFSClasses",
  "lib/LuaArgParser",
  "lib/LuaPath",
}

local phobos_extension = ".lua"

local function standalone_profile(name, optimizations)
  local profile = profiles.add_profile{
    name = name,
    output_dir = "out/"..name,
    temp_dir = "temp/"..name,
    phobos_extension = phobos_extension,
    optimizations = optimizations,
    -- HACK: until https://github.com/tomblind/local-lua-debugger-vscode/issues/56 is implemented
    use_load = true,
  }

  profiles.include{
    profile = profile,
    source_path = "src",
    source_name = "@src/?",
    output_path = ".",
  }

  for _, path in ipairs(factorio_specific_paths) do
    profiles.exclude{
      profile = profile,
      source_path = "src/"..path..phobos_extension,
    }
  end

  -- HACK: a quick test for now
  for _, to_copy in ipairs{
    {"bin/linux", "bin"},
    {"launch_scripts/phobos", "phobos"},
  }
  do
    profiles.include_copy{
      profile = profile,
      source_path = to_copy[1],
      output_path = to_copy[2],
    }
  end
end

local function factorio_profile(name, optimizations)
  local profile = profiles.add_profile{
    name = "factorio_"..name,
    output_dir = "out/factorio_"..name.."/phobos",
    temp_dir = "temp/factorio_"..name,
    phobos_extension = phobos_extension,
    optimizations = optimizations,
    use_load = true,
  }

  profiles.include{
    profile = profile,
    source_path = "src",
    source_name = "@src/?",
    output_path = ".",
  }

  for _, path in ipairs(standalone_specific_paths) do
    profiles.exclude{
      profile = profile,
      source_path = "src/"..path..phobos_extension,
    }
  end
end

standalone_profile("debug", nil)
standalone_profile("release", profiles.get_all_optimizations())
factorio_profile("debug", nil)
factorio_profile("release", profiles.get_all_optimizations())
