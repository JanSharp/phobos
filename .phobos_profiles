
local profiles = require("phobos_profiles")
local util = require("util")

local args = profiles.parse_extra_args({...}, {
  options = {
    {
      field = "platform",
      long = "platform",
      short = "p",
      description = "When omitted no standalone profiles will be added.\n\z
                     Possible values: 'linux', 'osx' or 'windows'.",
      type = "string",
      single_param = true,
      optional = true,
    },
  },
})

local platform = args.platform
if platform then
  util.assert(util.invert{"linux", "osx", "windows"}[platform],
    "Expected 'linux', 'osx' or 'windows', got '"..platform.."' for --platform."
  )
end

local factorio_specific_paths = {
  "control",
}
local standalone_specific_paths = {
  "main",
  "io_util",
  "lib/LFSClasses",
  "lib/LuaArgParser",
  "lib/LuaPath",
}

local phobos_extension = ".lua"

local function standalone_profile(name, optimizations)
  util.debug_assert(platform)
  local profile = profiles.add_profile{
    name = name,
    output_dir = "out/"..name,
    cache_dir = "temp/cache/"..name,
    phobos_extension = phobos_extension,
    optimizations = optimizations,
    -- HACK: until https://github.com/tomblind/local-lua-debugger-vscode/issues/56 is implemented
    use_load = true,
  }

  profiles.include{
    profile = profile,
    source_path = "src",
    source_name = "@src/?",
    output_path = ".",
  }

  for _, path in ipairs(factorio_specific_paths) do
    profiles.exclude{
      profile = profile,
      source_path = "src/"..path..phobos_extension,
    }
  end

  local function copy(source, output)
    profiles.include_copy{
      profile = profile,
      source_path = source,
      output_path = output,
    }
  end

  copy("bin/"..platform, "bin")
  local launch_script_file = "phobos"..(platform == "windows" and ".bat" or "")
  copy("launch_scripts/"..launch_script_file, launch_script_file)
  if platform == "windows" then
    -- don't have install and uninstall scripts for windows (yet?)
  else
    copy("launch_scripts/install_phobos", "install_phobos")
    copy("launch_scripts/uninstall_phobos", "uninstall_phobos")
  end
end

local function factorio_profile(name, optimizations)
  local profile = profiles.add_profile{
    name = "factorio_"..name,
    output_dir = "out/factorio_"..name.."/phobos",
    cache_dir = "temp/cache/factorio_"..name,
    phobos_extension = phobos_extension,
    optimizations = optimizations,
    use_load = true,
  }

  profiles.include{
    profile = profile,
    source_path = "src",
    source_name = "@src/?",
    output_path = ".",
  }

  for _, path in ipairs(standalone_specific_paths) do
    profiles.exclude{
      profile = profile,
      source_path = "src/"..path..phobos_extension,
    }
  end
end

if platform then
  standalone_profile("debug", nil)
  standalone_profile("release", profiles.get_all_optimizations())
else
  print("Info: Standalone profiles only get added if the extra arg '--platform' was provided.")
end
factorio_profile("debug", nil)
factorio_profile("release", profiles.get_all_optimizations())
