
local walker = require("ast_walker")
local ast = require("ast_util")
local nodes = require("nodes")

local on_open = {
  call = function(node)
    -- add `__phobos__.` to every `require`, which are identified by
    -- a call where its expression is an index into _ENV with the key "require"
    -- and the call takes at least 1 argument which is a literal string that doesn't start with "__"
    local ex = node.ex
    local arg = node.args[1]
    if arg and arg.node_type == "string" and (not arg.value:find("^__")) and ex.node_type == "index" then
      local index_suffix = ex.suffix
      if index_suffix.node_type == "string" and index_suffix.value == "require" then
        local index_ex = ex.ex
        if index_ex.node_type == "upval_ref" then
          local def = index_ex.reference_def
          repeat
            def = def.parent_def
          until def.def_type == "local"
          if def.scope.node_type == "env_scope" then
            arg.value = "__phobos__."..arg.value
          end
        end
      end
    end
  end,
}

return function(main)
  walker.walk_scope(main, walker.new_context(on_open, nil))

  -- insert
  -- `if ... ~= "__phobos__.foo" then return require("__phobos__.foo") end`
  -- at the beginning of the main body

  local correct_require_name = main.source
    :gsub("^@", "")
    :gsub("__phobos__/src", "__phobos__")
    :gsub("%.lua$", "")
    :gsub("%.pho$", "")
    :gsub("/", ".")

  -- requiring an iife for every scope is annoying but there is not much to be done about that
  ast.prepend_stat(main, nodes.new_ifstat{
    ifs = {(function()
      local testblock = nodes.new_testblock{ -- `if`
        parent_scope = main,
        condition = nodes.new_binop{ -- `... ~= <correct_require_name>`
          left = nodes.new_vararg{},
          op = "~=",
          right = nodes.new_string{value = correct_require_name},
        },
      } -- `then`
      ast.append_stat(testblock, nodes.new_retstat{ -- `return`
        exp_list = {nodes.new_call{
          ex = nodes.new_index{ -- `_ENV.require`
            ex = ast.create_ref_to(main.parent_scope.locals[1], testblock),
            suffix = nodes.new_string{value = "require"},
          },
          args = {nodes.new_string{value = correct_require_name}}, -- `(<correct_require_name>)`
        }},
      })
      return testblock -- `end`
    end)()},
  })
end
