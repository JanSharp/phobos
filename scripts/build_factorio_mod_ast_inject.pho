
local walker = require("ast_walker")
local ill = require("indexed_linked_list")
local ast = require("ast_util")

local on_open = {
  call = function(node, scope)
    -- add `__phobos__.` to every `require`, which are identified by
    -- a call where its expression is an index into _ENV the key "require"
    -- and the call takes at least 1 argument which is a literal string that doesn't start with "__"
    local ex = node.ex
    local arg = node.args[1]
    if arg and arg.node_type == "string" and (not arg.value:find("^__")) and ex.node_type == "index" then
      local index_suffix = ex.suffix
      if index_suffix.node_type == "string" and index_suffix.value == "require" then
        local index_ex = ex.ex
        if index_ex.node_type == "upval_ref" then
          local def = index_ex.reference_def
          repeat
            def = def.parent_def
          until def.def_type == "local"
          if def.scope.node_type == "env" then
            arg.value = "__phobos__."..arg.value
          end
        end
      end
    end
  end,
}

return function(main)
  walker.walk_scope(main, {on_open = on_open})

  -- insert
  -- `if ... ~= "__phobos__.foo" then return require("__phobos__.foo") end`
  -- at the beginning of the main body
  -- except for `control`, because not only makes that no sense,
  -- but it also breaks by indexing global ? a nil value. Idk why

  local correct_require_name = main.source
    :gsub("^@", "")
    :gsub("__phobos__/src", "__phobos__")
    :gsub("%.lua$", "")
    :gsub("%.pho$", "")
    :gsub("/", ".")

  if correct_require_name == "__phobos__.control" then
    return
  end

  -- this is basically 100% temp
  -- definition of AST like this is going to change with some library functions at some point
  local ifstat_elem = ill.prepend(main.body)
  local ifstat = ast.new_node("ifstat")
  ifstat.elem_stat = ifstat_elem
  ifstat.ifs = {(function()
    local testblock = ast.new_node("testblock")
    testblock.stat_elem = ifstat_elem
    testblock.parent_scope = main
    testblock.locals = {}
    testblock.labels = {}
    testblock.condition = (function()
      local binop = ast.new_node("binop")
      binop.stat_elem = ifstat_elem
      binop.left = (function()
        local vararg = ast.new_node("vararg")
        vararg.stat_elem = ifstat_elem
        return vararg
      end)()
      binop.op = "~="
      binop.right = (function()
        local str = ast.new_node("string")
        str.elem_stat = ifstat_elem
        str.value = correct_require_name
        return str
      end)()
      return binop
    end)()
    testblock.body = ill.new()

    local retstat_elem = ill.append(testblock.body)
    local retstat = ast.new_node("retstat")
    retstat.stat_elem = retstat_elem
    retstat.exp_list = {(function()
      local call = ast.new_node("call")
      call.stat_elem = retstat_elem
      call.ex = (function()
        local index = ast.new_node("index")
        index.stat_elem = retstat_elem
        local ident_node = ast.new_node("ident")
        ident_node.value = "_ENV"
        index.ex = ast.get_ref(testblock, retstat_elem, ident_node, retstat)
        index.suffix = (function()
          local str = ast.new_node("string")
          str.stat_elem = retstat_elem
          str.value = "require"
          return str
        end)()
        return index
      end)()
      call.args = {(function()
        local str = ast.new_node("string")
        str.stat_elem = retstat_elem
        str.value = correct_require_name
        return str
      end)()}
      return call
    end)()}
    retstat_elem.value = retstat

    return testblock
  end)()}
  ifstat_elem.value = ifstat
end
