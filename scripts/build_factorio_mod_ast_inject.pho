
local walker = require("ast_walker")
local ast = require("ast_util")
local nodes = require("nodes")

local on_open = {
  call = function(node, scope)
    -- add `__phobos__.` to every `require`, which are identified by
    -- a call where its expression is an index into _ENV with the key "require"
    -- and the call takes at least 1 argument which is a literal string that doesn't start with "__"
    local ex = node.ex
    local arg = node.args[1]
    if arg and arg.node_type == "string" and (not arg.value:find("^__")) and ex.node_type == "index" then
      local index_suffix = ex.suffix
      if index_suffix.node_type == "string" and index_suffix.value == "require" then
        local index_ex = ex.ex
        if index_ex.node_type == "upval_ref" then
          local def = index_ex.reference_def
          repeat
            def = def.parent_def
          until def.def_type == "local"
          if def.scope.node_type == "env_scope" then
            arg.value = "__phobos__."..arg.value
          end
        end
      end
    end
  end,
}

return function(main)
  walker.walk_scope(main, {on_open = on_open})

  -- insert
  -- `if ... ~= "__phobos__.foo" then return require("__phobos__.foo") end`
  -- at the beginning of the main body

  local correct_require_name = main.source
    :gsub("^@", "")
    :gsub("__phobos__/src", "__phobos__")
    :gsub("%.lua$", "")
    :gsub("%.pho$", "")
    :gsub("/", ".")

  -- hmmm, so this is no longer temp, but I still don't love it
  -- requiring a callback for every statement is... eh? I'm mostly annoyed by `stat_elem`
  -- requiring an iife for every scope is also annoying but there is not much to be done about that
  -- I really wish `stat_elem` just wasn't a thing
  ast.prepend_stat(main, function(ifstat_elem)
    return nodes.new_ifstat{
      stat_elem = ifstat_elem,
      ifs = {(function()
        local testblock = nodes.new_testblock{ -- `if`
          stat_elem = ifstat_elem,
          parent_scope = main,
          condition = nodes.new_binop{ -- `... ~= <correct_require_name>`
            stat_elem = ifstat_elem,
            left = nodes.new_vararg{stat_elem = ifstat_elem},
            op = "~=",
            right = nodes.new_string{
              stat_elem = ifstat_elem,
              value = correct_require_name,
            },
          },
        } -- `then`

        ast.append_stat(testblock, function(retstat_elem)
          return nodes.new_retstat{ -- `return`
            stat_elem = retstat_elem,
            exp_list = {nodes.new_call{
              stat_elem = retstat_elem,
              ex = nodes.new_index{ -- `_ENV.require`
                stat_elem = retstat_elem,
                ex = ast.get_ref(testblock, retstat_elem, "_ENV"),
                suffix = nodes.new_string{
                  stat_elem = retstat_elem,
                  value = "require",
                },
              },
              args = {nodes.new_string{ -- `(<correct_require_name>)`
                stat_elem = retstat_elem,
                value = correct_require_name,
              }},
            }},
          }
        end)

        return testblock -- `end`
      end)()},
    }
  end)
end
